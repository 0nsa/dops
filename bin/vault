#!/bin/bash -eu
#
# Encrypt and decrypt sensitives files using OpenSSL.
#
# - Files to encrypt need to be located with a minimum depth of 2.
# - A password file is required (.vault.secret if VAULT_SECRET_PATH is not defined).
#
# Usage: vault <path> <filter>
#
set -o pipefail

USERID=${USERID:-$(id -u)}
RED='\033[0;31m'
NC='\033[0m' # No Color

comment()   { sed 's|^|# |g'; }
uncomment() { sed 's|^# ||g'; }

encrypt_file() {
    set_password
    local decryptedFile=$1
    local encryptedFile=$decryptedFile.encrypt

    cat $decryptedFile | openssl aes-256-cbc -salt -a -k $PASSWORD -md md5 | comment > $encryptedFile
    chown $USERID:$USERID $encryptedFile || true
}

decrypt_file() {
    set_password
    local encryptedFile=$1
    local decryptedFile=$2
    local tempDecryptedFile=$decryptedFile

    if [ -f $decryptedFile ]; then
        tempDecryptedFile="$decryptedFile.$(date +%s).decrypted"
    fi

    set +e
    cat $encryptedFile | uncomment | openssl aes-256-cbc -d -a -k $PASSWORD -md md5 &> $tempDecryptedFile
    status=$?
    set -e
    if [[ $status -ne 0 ]]; then
        mv $tempDecryptedFile $tempDecryptedFile.error
        decryptedFile=$tempDecryptedFile.error
        (>&2 printf "${RED}Could not decrypt $encryptedFile, partial decryption in $tempDecryptedFile.error\n$NC")
    else
        if cmp -s $tempDecryptedFile $decryptedFile; then
           if [[ "$tempDecryptedFile" != "$decryptedFile" ]]; then
               rm $tempDecryptedFile
           fi
        else
            (>&2 printf "${RED}Decrypting $encryptedFile would override $decryptedFile content.${NC}\nDecrypting to $tempDecryptedFile instead\n")
            decryptedFile=$tempDecryptedFile
        fi
    fi
    chown $USERID:$USERID $decryptedFile && chmod 600 $decryptedFile || true
}

list_files_to_encrypt() {
    declare spath=$1
    declare filter=$2
    # Exclude some directories and files
    find "$spath" -mindepth 1 \
        ! -path "./.git/*" ! -path "./http-api/*" ! -name "*.encrypt" ! -name "*.temp" ! -name "\.DS_Store" \
        -name "*$filter*" -type f
}

list_files_to_decrypt() {
    declare spath=$1
    declare filter=$2
    # Exclude .git and search by name
    find "$spath" -mindepth 1 \
        ! -path "./.git/*" -name "*.encrypt" \
        -name "*$filter*" -type f
}

maybe_encrypt_file() {
    local decryptedFile=$1
    # Encrypt only if the file changed
    declare sha1="notYetEncrypted"
    if [[ -f $decryptedFile.encrypt ]]; then
        decrypt_file $decryptedFile.encrypt $decryptedFile.temp
        sha1=$(sha1sum $decryptedFile.temp | cut -d ' ' -f1)
    fi
    sha2=$(sha1sum $decryptedFile | cut -d ' ' -f1)
    if [[ "$sha1" != "$sha2" ]]; then
        echo
        echo "Encrypt $decryptedFile..."
        encrypt_file $decryptedFile
    fi
    rm -f $decryptedFile.temp $decryptedFile
}

encrypt() {
    declare path=$1
    declare filter=$2
    local i=1
    for decryptedFile in $(list_files_to_encrypt "$path" "$filter")
    do
        maybe_encrypt_file $decryptedFile &

        i=$(expr $i + 1)
        [[ $(($i % 50)) -eq 0 ]] && wait || true
    done
    wait
}

maybe_decrypt_file() {
    local encryptedFile=$1

    declare decryptedFile=${encryptedFile%.*}
    decrypt_file $encryptedFile $decryptedFile
}

decrypt() {
    declare path=$1
    declare filter=$2
    local i=1
    for encryptedFile in $(list_files_to_decrypt "$path" "$filter")
    do
        maybe_decrypt_file $encryptedFile &

        i=$(expr $i + 1)
        [[ $(($i % 50)) -eq 0 ]] && wait || true
    done
    wait
}

set_password() {
    if [[ ! -z "${PASSWORD:-}" ]]; then
        #Password already set
        return
    fi

    if [[ "${VAULT_KEY:-}" != "" ]]; then
        PASSWORD=$VAULT_KEY
    else
        SECRET=${VAULT_SECRET_PATH:-.vault.secret}
        [ -f $SECRET ] && PASSWORD=$(cat $SECRET)
    fi

    if [[ "${PASSWORD:-}" == "" ]]; then
        (>&2 printf "${RED}No VAULT_KEY found\n$NC")
        exit
    fi
}

main() {
    declare cmd=$1
    declare path=${2:-"."}
    declare filter=${3:-"*"}
    declare startTime=$(date +%s)

    case $cmd in
        encrypt ) encrypt "$path" "$filter" ;;
        decrypt ) decrypt "$path" "$filter" ;;
        ls:e*   ) list_files_to_encrypt "$path" "$filter" ;;
        ls:d*   ) list_files_to_decrypt "$path" "$filter" ;;
    esac
}

main "$@"
