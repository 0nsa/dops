#
# Custom ZSH config.
#

source ~/._docker-machine
source ~/._kubectl
source ~/._autocompletion

help() {
  echo '
      _
   __| | ___  _ __  ___
  / _` |/ _ \| |_ \/ __|
 | (Â°| < (#) < |_) \__ \
  \__,_|\___/| .__/|___/
             |_|
 -----------------------

Commands:
  cluster         Select a cluster
  node            Select a node
  dmssh           SSH a <node>
  dmlog           Stream <node> syslog (using docker-machine ssh tail -f syslog)
  vault:encrypt   Encrypt secrets
  vault:decrypt   Decrypt secrets
  rcmd            Execute a remote command (using ansible)
  rcmds           Execute a remote command on all machines (using ansible)
  eachmachine     Execute a local command by setting each docker-engine machine
  eachcluster     Execute a local command in all clusters
  eachmachine
  eachcluster
  ansible-install-python
  sshkeygen       Generate SSH key
  randword        Generate random name

Aliases:
  a     ansible
  ap    ansible-playbook
  d     docker
  dm    docker-machine
  dc    docker-compose
  tf    terraform'
}

# Automatically set all bin/ directories in the PATH

__list_bin_paths() {
  local _ops_bin_paths=""
  while read bin_dir; do
    _ops_bin_paths="$ops_bin_paths:$bin_dir"
  done < <(find /ops -maxdepth 3 -name bin -type d)
  echo "$_ops_bin_paths"
}

export PATH=$(__list_bin_paths):$PATH

# Aliases

alias tf='terraform-wrapper'
alias cl='cluster'
alias n='node'
alias dme='node'
alias denv='node'

###
# Functions

__list_clusters() {
  ls -1 /ops/clusters | grep -v "^ssh$"
}

eachcluster() {
  for c in $(__list_clusters | grep -v tf-modules);  do
    >&2 echo "> cluster $c..."
    cluster $c
    $@
  done
}

cluster() {
  # Update CLUSTER env var
  declare clusterName=${1:-""}
  if [[ "$clusterName" == "" ]]; then
    echo 2> "Warn: CLUSTER not set"
    return
  fi
  export CLUSTER=$clusterName

  # Refreshing cluster env vars
  eval $(set_cluster_env)

  # Reset machine env vars if set
  if [[ ! -z $MACHINE ]] || [[ ! -z $DOCKER_MACHINE_NAME ]]; then
    eval $(set_docker_env '!reset')
  fi

  # Refreshing docker machine env vars
  eval $(set_docker_env)
}

node() {
  eval $(MACHINE=$1 set_docker_env)
}

dmssh() {
  docker-machine ssh $DOCKER_MACHINE_NAME
}

eachmachine() {
  for m in $(docker-machine ls -q); do
    >&2 echo "> machine $m..."
    dme $m
    $@
  done
}

rcmd () {
  declare cmd_args="$@"
  docker-machine ssh $DOCKER_MACHINE_NAME $cmd_args
}

rcmds () {
  declare cmd_args="$@"
  ansible all -m raw -ba "$cmd_args"
}

dmlog () {
  docker-machine ssh $DOCKER_MACHINE_NAME sudo tail -f /var/log/syslog | grep "${1:- }"
}

# Vault

vault:encrypt() {
  if [[ -d "env" ]]; then
    vault encrypt . secrets
    [[ ${USERID:-} != "" ]] && chown $USERID:$USERID -R "env"
  fi
  if [[ -d "clusters" ]]; then
    vault encrypt "clusters" .pem
    vault encrypt "clusters" .id_rsa
    [[ ${USERID:-} != "" ]] && chown $USERID:$USERID -R clusters
  fi
}

vault:decrypt() {
  vault decrypt . encrypt
}

# Ansible

play() {
  declare name=$1 && shift
  ansible-playbook /ops/ansible/$name.yml $@
}

ansible-install-python() {
  ansible all -m raw -sa "apt-get update && apt-get -y install python"
}

# Utils

sshkeygen() {
  declare name=$1
  ssh-keygen -t rsa -b 4096 -i -f $(pwd)/$name
}

randword() {
  local name=$(shuf -n 1 /usr/share/dict/names)
  local qualifier=$(shuf -n 1 /usr/share/dict/qualifiers)
  echo "$name-$qualifier"
}

# Source additional user files that may exist in ~/.dopsinit
[[ -d ~/.dopsinit ]] && \
  for f in ~/.dopsinit/*; do source $f; done