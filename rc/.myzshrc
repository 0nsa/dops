#
# Custom ZSH config.
#

source ~/._docker-machine
source ~/._autocompletion

# Automatically set all bin/ directories in the PATH

__list_bin_paths() {
  local _ops_bin_paths=""
  while read bin_dir; do
    _ops_bin_paths="$ops_bin_paths:$bin_dir"
  done < <(find /ops -maxdepth 3 -name bin -type d)
  echo "$_ops_bin_paths"
}

export PATH=$(__list_bin_paths):$PATH

# Aliases

alias tf='terraform-wrapper'

# Functions

dmssh() {
  docker-machine ssh $DOCKER_MACHINE_NAME
}

randword() {
  local name=$(shuf -n 1 /usr/share/dict/names)
  local qualifier=$(shuf -n 1 /usr/share/dict/qualifiers)
  echo "$name-$qualifier"
}

denv() { eval $(MACHINE=$1 set_docker_env) }

eachmachine() {
  for m in $(docker-machine ls -q); do
    >&2 echo "> machine $m..."
    dme $m
    $@
  done
}

rcmd () {
  declare cmd_args="$@"
  docker-machine ssh $DOCKER_MACHINE_NAME $cmd_args
}

rcmds () {
  declare cmd_args="$@"
  ansible all -sa 'sh -c "'$cmd_args'"'
}

dmlog () {
  docker-machine ssh $DOCKER_MACHINE_NAME sudo tail -f /var/log/syslog | grep "${1:- }"
}

play() {
  declare name=$1 && shift
  ansible-playbook /ops/ansible/$name.yml $@
}

vault:encrypt() {
  if [[ -d "env" ]]; then
    vault encrypt . secrets
    [[ ${USERID:-} != "" ]] && chown $USERID:$USERID -R "env"
  fi
  if [[ -d "clusters" ]]; then
    vault encrypt "clusters" .pem
    vault encrypt "clusters" .id_rsa
    [[ ${USERID:-} != "" ]] && chown $USERID:$USERID -R clusters
  fi
}

vault:decrypt() {
  vault decrypt . encrypt
}

sshkeygen() {
  declare name=$1
  ssh-keygen -t rsa -b 4096 -i -f $(pwd)/$name
}

ansible-install-python() {
  ansible all -m raw -sa "apt-get update && apt-get -y install python"
}

###
# Switch cluster

eachcluster() {
  for c in $(__list_clusters | grep -v tf-modules);  do
    >&2 echo "> cluster $c..."
    cluster $c
    $@
  done
}

cluster() {
  # Update CLUSTER env var
  declare clusterName=${1:-""}
  if [[ "$clusterName" == "" ]]; then
    echo 2> "Warn: CLUSTER not set"
    return
  fi
  export CLUSTER=$clusterName

  # Refreshing cluster env vars
  eval $(set_cluster_env)

  # Reset machine env vars if set
  if [[ ! -z $MACHINE ]] || [[ ! -z $DOCKER_MACHINE_NAME ]]; then
    eval $(set_docker_env '!reset')
  fi

  # Refreshing docker machine env vars
  eval $(set_docker_env)
}

__list_clusters() {
  ls -1 /ops/clusters | grep -v "^ssh$"
}

__autocomplete_clusters() {
  while read m
  do
    compadd "$m"
  done < <(__list_clusters)
  return 0
}

compdef __autocomplete_clusters cluster

alias cl='cluster'
